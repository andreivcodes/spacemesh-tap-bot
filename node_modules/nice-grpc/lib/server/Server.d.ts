import { ChannelOptions, ServerCredentials } from '@grpc/grpc-js';
import { ServerMiddleware } from 'nice-grpc-common';
import { CompatServiceDefinition } from '../service-definitions';
import { ServiceImplementation } from './ServiceImplementation';
export declare type Server<CallContextExt = {}> = {
    use<Ext>(middleware: ServerMiddleware<Ext, CallContextExt>): Server<CallContextExt & Ext>;
    with<Ext>(middleware: ServerMiddleware<Ext, CallContextExt>): ServerAddBuilder<CallContextExt & Ext>;
    add<Service extends CompatServiceDefinition>(definition: Service, implementation: ServiceImplementation<Service, CallContextExt>): void;
    /**
     * Start listening on given 'host:port'.
     *
     * Use 'localhost:0' to bind to a random port.
     *
     * Returns port that the server is bound to.
     */
    listen(address: string, credentials?: ServerCredentials): Promise<number>;
    shutdown(): Promise<void>;
    forceShutdown(): void;
};
export declare type ServerAddBuilder<CallContextExt> = {
    with<Ext>(middleware: ServerMiddleware<Ext, CallContextExt>): ServerAddBuilder<CallContextExt & Ext>;
    add<Service extends CompatServiceDefinition>(definition: Service, implementation: ServiceImplementation<Service, CallContextExt>): void;
};
export declare function createServer(options?: ChannelOptions): Server;
