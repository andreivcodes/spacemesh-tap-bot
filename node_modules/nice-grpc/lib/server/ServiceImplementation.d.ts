import { CallContext } from 'nice-grpc-common';
import { CompatServiceDefinition, MethodDefinition, NormalizedServiceDefinition, ServiceDefinition } from '../service-definitions';
import { MethodRequestOut, MethodResponseIn } from '../utils/methodTypes';
export declare type ServiceImplementation<Service extends CompatServiceDefinition, CallContextExt = {}> = RawServiceImplementation<NormalizedServiceDefinition<Service>, CallContextExt>;
export declare type RawServiceImplementation<Service extends ServiceDefinition, CallContextExt = {}> = {
    [Method in keyof Service]: MethodImplementation<Service[Method], CallContextExt>;
};
export declare type MethodImplementation<Definition extends MethodDefinition<any, any, any, any>, CallContextExt = {}> = Definition['requestStream'] extends false ? Definition['responseStream'] extends false ? UnaryMethodImplementation<MethodRequestOut<Definition>, MethodResponseIn<Definition>, CallContextExt> : Definition['responseStream'] extends true ? ServerStreamingMethodImplementation<MethodRequestOut<Definition>, MethodResponseIn<Definition>, CallContextExt> : never : Definition['requestStream'] extends true ? Definition['responseStream'] extends false ? ClientStreamingMethodImplementation<MethodRequestOut<Definition>, MethodResponseIn<Definition>, CallContextExt> : Definition['responseStream'] extends true ? BidiStreamingMethodImplementation<MethodRequestOut<Definition>, MethodResponseIn<Definition>, CallContextExt> : never : never;
export declare type UnaryMethodImplementation<Request, Response, CallContextExt = {}> = (request: Request, context: CallContext & CallContextExt) => Promise<Response>;
export declare type ServerStreamingMethodImplementation<Request, Response, CallContextExt = {}> = (request: Request, context: CallContext & CallContextExt) => ServerStreamingMethodResult<Response>;
export declare type ClientStreamingMethodImplementation<Request, Response, CallContextExt = {}> = (request: AsyncIterable<Request>, context: CallContext & CallContextExt) => Promise<Response>;
export declare type BidiStreamingMethodImplementation<Request, Response, CallContextExt = {}> = (request: AsyncIterable<Request>, context: CallContext & CallContextExt) => ServerStreamingMethodResult<Response>;
export declare type ServerStreamingMethodResult<Response> = {
    [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};
